{"version":3,"sources":["webparts/Services/bal/MasterAllReqOps.ts"],"names":[],"mappings":"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","file":"webparts/Services/bal/MasterAllReqOps.js","sourcesContent":["import { ICabaModuleProps } from '../interface/ICabaModuleProps';\r\nimport { IMasterProps } from '../interface/IMasterProps';\r\nimport SPCRUDOPS from '../dal/spcrudops';\r\n\r\nexport interface MasterAllReqOps {\r\n    getCABASpecData(props: IMasterProps): Promise<IMasterProps>;\r\n    getCABAFlateTypesData(props: IMasterProps): Promise<IMasterProps>;\r\n    getOccupancyTypeData(props: IMasterProps): Promise<IMasterProps>;\r\n    getSocietyNameData(props:IMasterProps): Promise<IMasterProps>;\r\n   }\r\n\r\nexport default function MasterAllReqOps() {\r\n    const spCrudOps = SPCRUDOPS();\r\n    const getCABASpecData = async (props: ICabaModuleProps): Promise<IMasterProps[]> => {\r\n        debugger;\r\n        var currentUserLogin = props.currentSPContext.pageContext._user._displayName;\r\n          return await (await spCrudOps).getData(\"FlatSpecificationsMaster\"\r\n            , \"*,Id,FlatSpecifications\"\r\n            , \"\"          \r\n            , \"\"\r\n            , { column: 'Id', isAscending: false }, props).then(results => {\r\n                console.log(results);\r\n                let brr: Array<IMasterProps> = new Array<IMasterProps>();\r\n                results.map(item => {\r\n                    brr.push({\r\n                        ID:item.ID,\r\n                         FlatSpecifications:item.FlatSpecifications\r\n                    });\r\n                });\r\n\r\n                return brr;\r\n            });\r\n    };\r\n\r\n    const getCABAFlateTypesData = async (props: ICabaModuleProps): Promise<IMasterProps[]> => {\r\n        debugger;\r\n        var currentUserLogin = props.currentSPContext.pageContext._user._displayName;\r\n          return await (await spCrudOps).getData(\"CABAFlatTypeMaster\"\r\n            , \"*,Id,FlatType\"\r\n            , \"\"          \r\n            , \"\"\r\n            , { column: 'Id', isAscending: false }, props).then(results => {\r\n                console.log(results);\r\n                let brr: Array<IMasterProps> = new Array<IMasterProps>();\r\n                results.map(item => {\r\n                    brr.push({\r\n                        ID:item.ID,\r\n                        FlatType:item.FlatType\r\n                    });\r\n                });\r\n\r\n                return brr;\r\n            });\r\n    };\r\n    const getOccupancyTypeData = async (props: ICabaModuleProps): Promise<IMasterProps[]> => {\r\n        debugger;\r\n        var currentUserLogin = props.currentSPContext.pageContext._user._displayName;\r\n          return await (await spCrudOps).getData(\"OccupancyTypeMaster\"\r\n            , \"*,Id,OccupancyType\"\r\n            , \"\"          \r\n            , \"\"\r\n            , { column: 'Id', isAscending: false }, props).then(results => {\r\n                console.log(results);\r\n                let brr: Array<IMasterProps> = new Array<IMasterProps>();\r\n                results.map(item => {\r\n                    brr.push({\r\n                        ID:item.ID,\r\n                        OccupancyType:item.OccupancyType\r\n                    });\r\n                });\r\n\r\n                return brr;\r\n            });\r\n    };\r\n    const getSocietyNameData = async (props: ICabaModuleProps): Promise<IMasterProps[]> => {\r\n        debugger;\r\n        var currentUserLogin = props.currentSPContext.pageContext._user._displayName;\r\n          return await (await spCrudOps).getData(\"SocietyNameMaster\"\r\n            , \"*,Id,SocietyName\"\r\n            , \"\"          \r\n            , \"\"\r\n            , { column: 'Id', isAscending: false }, props).then(results => {\r\n                console.log(results);\r\n                let brr: Array<IMasterProps> = new Array<IMasterProps>();\r\n                results.map(item => {\r\n                    brr.push({\r\n                        ID:item.ID,\r\n                        SocietyName:item.SocietyName\r\n                    });\r\n                });\r\n\r\n                return brr;\r\n            });\r\n    };\r\n\r\n    return {\r\n        getCABASpecData,\r\n        getCABAFlateTypesData,\r\n        getOccupancyTypeData,\r\n        getSocietyNameData\r\n    };\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}