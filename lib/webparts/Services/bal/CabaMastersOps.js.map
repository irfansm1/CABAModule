{"version":3,"sources":["webparts/Services/bal/CabaMastersOps.ts"],"names":[],"mappings":"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","file":"webparts/Services/bal/CabaMastersOps.js","sourcesContent":["import { ICabaModuleProps } from '../interface/ICabaModuleProps';\nimport SPCRUDOPS from '../dal/spcrudops';\nimport { IMasterProps } from '../interface/IMasterProps';\nimport { Item } from 'sp-pnp-js';\n\n\nexport interface CabaMasterOps {\n    getFlatSpecifications(props:ICabaModuleProps): Promise<any>;\n    getFlatType(props: ICabaModuleProps): Promise<any>;    \n    getOccupancyType(props: ICabaModuleProps): Promise<any>;\n    getSocietyName(props: ICabaModuleProps): Promise<any>;\n    getOfficeLocation(props: ICabaModuleProps): Promise<any>;\n    getDesignation(props: ICabaModuleProps): Promise<IMasterProps>;\n    }\n\nexport default function CabaMasterOps() {\n    const spCrudOps = SPCRUDOPS();\n    debugger;\n    \n    const getFlatSpecifications = async (props: ICabaModuleProps): Promise<any[]> => {\n        debugger;\n        return await (await spCrudOps).getData(\"FlatSpecificationsMaster\"\n            , \"*,FlatSpecifications\"\n            , \"\"\n            , \"\"\n            , { column: 'Id', isAscending: false }, props).then(results => {\n                console.log(results);\n                debugger;\n                let master: Array<any> = new Array<any[]>();\n                results.map(item => {\n                    master.push({\n                        key: item.Id,\n                        text: item.FlatSpecifications\n                    });\n                });\n\n                return master;\n            });\n    };\n    const getFlatType = async (props: ICabaModuleProps): Promise<any[]> => {\n\n        return await (await spCrudOps).getData(\"CABAFlatTypeMaster\"\n            , \"*,FlatType\"\n            , \"\"\n            , \"\"\n            , { column: 'Id', isAscending: false }, props).then(results => {\n                console.log(results);\n                let master: Array<any> = new Array<any[]>();\n                results.map(item => {\n                    master.push({\n                        key: item.Id,\n                        text: item.FlatType,\n                        \n                    });\n                });\n\n                return master;\n            });\n    };\n    \n    const getOccupancyType = async (props: ICabaModuleProps): Promise<any[]> => {\n\n        return await (await spCrudOps).getData(\"OccupancyTypeMaster\"\n            , \"*\"\n            , \"\"\n            , \"\"\n            , { column: 'Id', isAscending: false }, props).then(results => {\n                console.log(results);\n                let master: Array<any> = new Array<any[]>();\n                results.map(item => {\n                    master.push({\n                        key: item.Id,\n                        text: item.OccupancyType\n                    });\n                });\n                return master;\n            });\n    };\n    const getSocietyName = async (props: ICabaModuleProps): Promise<any[]> => {\n        return await (await spCrudOps).getData(\"SocietyNameMaster\"\n            , \"*\"\n            , \"\"\n            , \"\"\n            , { column: 'Id', isAscending: false }, props).then(results => {\n                console.log(results);\n                let master: Array<any> = new Array<any[]>();\n                results.map(item => {\n                    master.push({\n                        key: item.Id,\n                        text: item.SocietyName\n                    });\n                });\n\n                return master;\n            });\n    };\n    const getOfficeLocation = async (props: ICabaModuleProps): Promise<any[]> => {\n        return await (await spCrudOps).getData(\"OfficeMaster\"\n            , \"*\"\n            , \"\"\n            , \"\"\n            , { column: 'Id', isAscending: false }, props).then(results => {\n                console.log(results);\n                let master: Array<any> = new Array<any[]>();\n                results.map(item => {\n                    master.push({\n                        key: item.Id,\n                        text: item.OfficeLocation\n                    });\n                });\n\n                return master;\n            });\n    };\n\n    // const getDesignation = async (props: ICabaModuleProps): Promise<IMasterProps[]> => {\n    //     var currentUserLogin= props.currentSPContext.pageContext._user._displayName;\n    //     return await (await spCrudOps).getData(\"CABA_AssociationList\"\n    //         , \"*\"\n    //         , \"\"\n    //         , \"Designation eq '\"+currentUserLogin+\"'\"\n    //         , { column: 'Id', isAscending: false }, props).then(results => {\n    //             console.log(results);\n    //             let brr: Array<IMasterProps> = new Array<IMasterProps>();\n    //             results.map(item => {\n    //                 brr.push({\n    //                     ID: item.ID,\n    //                     Designation: item.Designation,\n    //                     FlatType: item.FlatType,\n    //                 });\n    //             });\n\n    //             return brr;\n    //         });\n    // };\n    \n    return {\n        getFlatType       \n        , getOccupancyType\n        , getSocietyName       \n        ,getFlatSpecifications\n        ,getOfficeLocation\n       // ,getDesignation\n    };\n}"],"sourceRoot":"../../../../src"}