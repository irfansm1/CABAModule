{"version":3,"sources":["webparts/Services/dal/spcrudops.ts"],"names":[],"mappings":"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","file":"webparts/Services/dal/spcrudops.js","sourcesContent":["\r\nimport { ICabaModuleProps } from \"../interface/ICabaModuleProps\";\r\n//import {  Web } from \"@pnp/sp\";\r\nimport { LogLevel, Logger, Web, sp, ItemAddResult } from 'sp-pnp-js';\r\n\r\n//import { ConsoleListener, Logger, LogLevel } from \"@pnp/logging\";\r\n\r\nexport interface ISPCRUDOPS {\r\n    getData(listName: string, columnsToRetrieve: string, columnsToExpand: string, filters: string\r\n        , orderby: { column: string, isAscending: boolean }, props: ICabaModuleProps): Promise<any>;\r\n    getRootData(listName: string, columnsToRetrieve: string, columnsToExpand: string, filters: string\r\n        , orderby: { column: string, isAscending: boolean }, props: ICabaModuleProps): Promise<any>;\r\n    insertData(listName: string, data: any, props: ICabaModuleProps): Promise<any>;\r\n     updateData(listName: string, itemId: number, data: any, props: ICabaModuleProps): Promise<any>;\r\n     deleteData(listName: string, itemId: number, props: ICabaModuleProps): Promise<any>;\r\n    // getListInfo(listName: string, props: IVendorBlockReleaseDevProps): Promise<any>;\r\n    batchInsert(listName: string, data: any, props: ICabaModuleProps): Promise<any>;\r\n    //currentProfile(props: IEximTravelBlockProps): Promise<any>;\r\n    getGroupUsers(UserId:any, props: ICabaModuleProps): Promise<any>;\r\n    currentUserInfo(props: ICabaModuleProps): Promise<any>;\r\n    // batchUpdate(listName: string, data: any, props: IVendorBlockReleaseDevProps): Promise<any>;\r\n    // batchDelete(listName: string, data: any, props: IVendorBlockReleaseDevProps): Promise<any>;\r\n    // uploadFile(folderServerRelativeUrl: string, file: File, props: IVendorBlockReleaseDevProps): Promise<any>;\r\n    // deleteFile(fileServerRelativeUrl: string, props: IVendorBlockReleaseDevProps): Promise<any>;\r\n}\r\n\r\nexport default async function SPCRUDOPS(): Promise<ISPCRUDOPS> {\r\n    const getData = async (listName: string, columnsToRetrieve: string, columnsToExpand: string, filters: string, orderby: { column: string, isAscending: boolean }, props: ICabaModuleProps) => {\r\n        let web = new Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n        const items: any[] = await web.lists.getByTitle(listName).items.select(columnsToRetrieve).expand(columnsToExpand).filter(filters).orderBy(orderby.column, orderby.isAscending).getAll();\r\n        return items;\r\n    };\r\n    const getRootData = async (listName: string, columnsToRetrieve: string, columnsToExpand: string, filters: string, orderby: { column: string, isAscending: boolean }, props: ICabaModuleProps) => {\r\n        let url = window.location.origin;\r\n        let web = new Web(url);\r\n        const items: any[] = await web.lists.getByTitle(listName).items.select(columnsToRetrieve).expand(columnsToExpand).filter(filters).orderBy(orderby.column, orderby.isAscending).getAll();\r\n        return items;\r\n    };\r\n    const insertData = async (listName: string, data: any, props: ICabaModuleProps) => {\r\n        let web = new Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n        return await web.lists.getByTitle(listName).items.add(data).then(result => {\r\n            return result;\r\n        });\r\n    };\r\n    const batchInsert = async (listName: string, data: any, props: ICabaModuleProps) => {\r\n        let web = new Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n        let list = web.lists.getByTitle(listName);\r\n        const entityTypeFullName = await list.getListItemEntityTypeFullName();\r\n        let batch = web.createBatch();\r\n\r\n        for (let d = 0; d < data.length; d++) {\r\n            list.items.inBatch(batch).add(data[d], entityTypeFullName).then(b => {\r\n                console.log(b);\r\n            });\r\n        }\r\n\r\n        return await batch.execute();\r\n    };\r\n    const updateData = async (listName: string, itemId: number, data: any, props: ICabaModuleProps) => {\r\n        let web = new Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n        return await web.lists.getByTitle(listName).items.getById(itemId).update(data).then(result => {\r\n            return result;\r\n        });\r\n    };\r\n\r\n    // const currentProfile = async (props: IEximTravelBlockProps) => {\r\n    //     return await sp.profiles.myProperties.get().then(async(response)=>{\r\n    //         return await sp.web.currentUser.get().then(async(response)=>{\r\n    //             console.log(response);\r\n    //         return response;\r\n    //       });\r\n    //      });\r\n    // };  \r\n    \r\n    const currentUserInfo = async (props: ICabaModuleProps) => {\r\n            return await sp.web.currentUser.get().then(async(response)=>{\r\n                return await getGroupUsers(response.Id,props).then(async(groupsresponse)=>{\r\n                    response.ishr=groupsresponse.filter(function(x){return x.Title=='HR';}).length>0;\r\n                    response.istraveldesk=groupsresponse.filter(function(x){return x.Title=='TravelDesk';}).length>0;\r\n                    response.istraveladmin=groupsresponse.filter(function(x){return x.Title=='TICE_Admin';}).length>0; \r\n                    return response;        \r\n                })\r\n          });\r\n    }; \r\n\r\n    const getGroupUsers = async (UserId:any,props: ICabaModuleProps) => {\r\n      return await sp.web.siteUsers.getById(UserId).groups.get().then(groups => {\r\n        return groups;\r\n      });\r\n    };\r\n    // const getGroupUsers = async (groupId: number, props: IEximTravelBlockProps) => {\r\n    //     let web = new Web(props.currentSPContext.pageContext.web.absoluteUrl+ \"/_api/web/siteusers\");\r\n    //     const items: any = await web.siteGroups.getById(groupId);\r\n    //     return items;\r\n    // };\r\n\r\n    const deleteData = async (listName: string, itemId: number, props: ICabaModuleProps) => {        \r\n        let web = new Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n        return await web.lists.getByTitle(listName).items.getById(itemId).delete().then(result => {\r\n            return result;\r\n        });\r\n    };\r\n\r\n    // const getListInfo = async (listName: string, props: IVendorBlockReleaseDevProps) => {\r\n    //     let web = Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n    //     const list = await web.lists.getByTitle(listName);\r\n    //     const listInfo = await list.select(\"Id,Title\")();\r\n\r\n    //     return listInfo;\r\n    // };\r\n\r\n\r\n\r\n    // const batchUpdate = async (listName: string, data: any, props: IVendorBlockReleaseDevProps) => {\r\n    //     let web = Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n    //     let list = web.lists.getByTitle(listName);\r\n    //     const entityTypeFullName = await list.getListItemEntityTypeFullName();\r\n    //     let batch = web.createBatch();\r\n\r\n    //     for (let d = 0; d < data.length; d++) {\r\n    //         list.items.getById(data[d].Id).inBatch(batch).update(data[d], entityTypeFullName).then(b => {\r\n    //             console.log(b);\r\n    //         });\r\n    //     }\r\n\r\n    //     return await batch.execute();\r\n    // };\r\n\r\n    // const batchDelete = async (listName: string, data: any, props: IVendorBlockReleaseDevProps) => {\r\n    //     let web = Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n    //     let list = web.lists.getByTitle(listName);\r\n    //     const entityTypeFullName = await list.getListItemEntityTypeFullName();\r\n    //     let batch = web.createBatch();\r\n\r\n    //     for (let d = 0; d < data.length; d++) {\r\n    //         list.items.getById(data[d].Id).inBatch(batch).delete().then(b => {\r\n    //             console.log(b);\r\n    //         });\r\n    //     }\r\n\r\n    //     return await batch.execute();\r\n    // };\r\n\r\n    // const uploadFile = async (folderServerRelativeUrl: string, file: File, props: IVendorBlockReleaseDevProps) => {\r\n    //     Logger.subscribe(new ConsoleListener());\r\n    //     Logger.activeLogLevel = LogLevel.Verbose;\r\n\r\n    //     let web = Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n    //     var ticks = ((new Date().getTime() * 10000) + 621355968000000000);\r\n    //     return await web.getFolderByServerRelativeUrl(folderServerRelativeUrl).files.addChunked(ticks.toString() + \"_\" + file.name, file, data => {\r\n    //         Logger.log({ data: data, level: LogLevel.Verbose, message: \"progress\" });\r\n    //     }, true);\r\n    // };\r\n\r\n    // const deleteFile = async (fileServerRelativeUrl: string, props: IVendorBlockReleaseDevProps) => {\r\n    //     Logger.subscribe(new ConsoleListener());\r\n    //     Logger.activeLogLevel = LogLevel.Verbose;\r\n\r\n    //     let web = Web(props.currentSPContext.pageContext.web.absoluteUrl);\r\n\r\n    //     return await web.getFileByServerRelativeUrl(fileServerRelativeUrl).delete().then(result => {\r\n    //         return result;\r\n    //     });\r\n    // };\r\n\r\n    return {\r\n        getData\r\n        , insertData\r\n        , getRootData\r\n        ,batchInsert\r\n        ,updateData\r\n        ,getGroupUsers\r\n       // ,currentProfile,\r\n        ,currentUserInfo\r\n        ,     deleteData,\r\n        //     getListInfo,\r\n\r\n        //     batchUpdate,\r\n        //     batchDelete,\r\n        //     uploadFile,\r\n        //     deleteFile\r\n    };\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}